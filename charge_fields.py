""""Utility for calculating the fields generated by elastic charges."""

import xarray as xr
import numpy as np


def hole_charges(pos, nodes, nu=0.3, stress=False):
    """Calculates all charges for the given hole positions, evaluated at spatial
        coordinates specified by nodes."""
    if not np.all(np.isfinite(pos)):
        return external(*nodes, nu, stress=stress)

    u, v = nodes - pos[:, np.newaxis]
    return xr.concat([
        quadrupole(u, v, nu, stress=stress),
        hexadecapole(u, v, nu, stress=stress)
    ], 'charge')


def quadrupole(u, v, nu=0.3, stress=False):
    u2 = u ** 2
    v2 = v ** 2
    u3 = u ** 3
    v3 = v ** 3
    u4 = u ** 4
    v4 = v ** 4
    u6 = u ** 6
    v6 = v ** 6

    one_over_r2 = 1. / (u2 + v2)
    one_over_r4 = one_over_r2 ** 2
    one_over_r6 = one_over_r2 ** 3
    one_over_r8 = one_over_r2 ** 4
    one_over_r10 = one_over_r2 ** 5
    d = np.zeros([3, 2, len(u)])
    d2 = np.zeros([3, 2, len(u)])

    d[0] = -2 * (1 + nu) * np.array([u, v]) * one_over_r2

    d[1] = 4 * np.array([u3 - nu * u * v2, -v3 + nu * u2 * v]) * one_over_r4

    d[2] = 2 * np.array([-v3 * (-1 + nu) + v * u2 * (3 + nu),
                         -u3 * (-1 + nu) + u * v2 * (3 + nu)]) * one_over_r4
    d2[0] = (1 + nu) ** 2 * (3 - nu) * np.array([u, v]) * one_over_r4
    d2[1] = 1 / 3 * one_over_r8 * np.array([
        u * ((31 + nu + (-11) * (nu ** 2) + 3 * (nu ** 3)) * u4 + 2 * ((-13) + nu * (41 + nu * (
                41 + 3 * nu))) * u2 * v2 + 3 * (21 + nu * (11 + ((-25) + nu) * nu)) * v4),
        v * (3 * (21 + nu * (11 + ((-25) + nu) * nu)) * u4 + 2 * ((-13) + nu * (41 + nu * (41 +
                                                                                           3 * nu))) * u2 * v2 + (
                     31 + nu + (-11) * (nu ** 2) + 3 * (nu ** 3)) * v4)])
    d2[2] = 1 / 3 * one_over_r8 * np.array([
        u * ((17 + nu * (29 + nu * ((-1) + 3 * nu))) * u4 + 2 * ((-1) + nu) * ((-61) +
                                                                               nu * ((-50) + 3 * nu)) * u2 * v2 + 3 * (
                     (-5) + nu * ((-1) + nu * (21 + nu))) * v4),
        v * (3 * ((-5) + nu * ((-1) + nu * (21 + nu))) * u4 + 2 * ((-1) + nu) * ((
                                                                                     -61) + nu * ((
                                                                                                      -50) + 3 * nu)) * u2 * v2 + (
                     17 + nu * (29 + nu * ((-1) + 3 * nu))) * v4)])

    if stress:
        s = np.zeros([3, 3, len(u)])
        s2 = np.zeros([3, 3, len(u)])
        s[0] = [2 * (u - v) * (u + v),
                4 * u * v,
                2 * (-u2 + v2)] * one_over_r4

        s[1] = [-4 * u2 * (u2 - 3 * v2),
                8 * u * v * (v2 - u2),
                4 * v2 * (-3 * u2 + v2)] * one_over_r6

        s[2] = [4 * u * v * (-3 * u2 + v2),
                2 * (u4 - 6 * u2 * v2 + v4),
                4 * u * v * (u2 - 3 * v2)] * one_over_r6

        s2[0] = (1 + nu) * np.array([
            ((-7) + nu) * u2 + (5 + (-3) * nu) * v2,
            4 * ((-3) + nu) * u * v,
            (5 + (-3) * nu) * u2 + ((-7) + nu) * v2
        ]) * one_over_r6

        s2[1] = one_over_r10 * np.array([
            (-1) * (23 + ((-20) + nu) * nu) * u6 + (39 + ((-228) + nu) * nu) * u4 * v2 +
            ((-45) + nu * (124 + 5 * nu)) * u2 * v4 + 3 * (7 + ((-4) + nu) * nu) * v6,
            (-4) * u * v * ((15 + ((-20) + nu) * nu) * u4 + 2 * ((-1) + nu * (28 + nu)) *
                            u2 * v2 + (15 + ((-20) + nu) * nu) * v4),
            3 * (7 + ((-4) + nu) * nu) * u6 + ((-45) + nu * (124 + 5 * nu)) * u4 * v2 +
            (39 + ((-228) + nu) * nu) * u2 *
            v4 + (-1) * (23 + ((-20) + nu) * nu) * v6])

        s2[2] = one_over_r10 * np.array([
            (-1) * (15 + nu * (20 + nu)) * u6 + ((-81) + nu * (212 + nu)) * u4 * v2 + (
                    75 + nu * ((-156) + 5 * nu)) * u2 * v4 + (13 + nu * ((-4) + 3 * nu)) * v6,
            (-4) * u * v * ((3 + nu * (16 + nu)) * u4 + 2 * (19 + ((-32) + nu) * nu) * u2 *
                            v2 + (3 + nu * (16 + nu)) * v4),
            (13 + nu * ((-4) + 3 * nu)) * u6 + (75 + nu * ((
                                                               -156) + 5 * nu)) * u4 * v2 + (
                        (-81) + nu * (212 + nu)) * u2 * v4 + (-1) * (
                    15 + nu * (20 + nu)) * v6])

    res = xr.Dataset({'d': (['charge', 'space', 'node', 'order'], np.stack([d, d2], axis=3)),
                      'charge_type': ('charge', ['quadIso', 'quad1', 'quad2'])})
    if stress:
        res['s'] = (['charge', 'space2', 'node'], s)
        res['s2'] = (['charge', 'space2', 'node'], s2)
    return res


def hexadecapole(u, v, nu=0.3, stress=False):
    u2 = u ** 2
    v2 = v ** 2
    u4 = u ** 4
    v4 = v ** 4

    one_over_r2 = 1. / (u2 + v2)
    one_over_r6 = one_over_r2 ** 3
    one_over_r8 = one_over_r2 ** 4
    one_over_r10 = one_over_r2 ** 5

    d = np.zeros([2, 2, len(u)])
    d2 = np.zeros([2, 2, len(u)])

    d[0] = 2 * (1 + nu) * np.array([u * (u2 - 3 * v2),
                                    -v * (v2 - 3 * u2)]) * one_over_r6

    d[1] = 2 * (1 + nu) * np.array([v * (3 * u2 - v2),
                                    u * (3 * v2 - u2)]) * one_over_r6
    d2[0] = 3 * (3 - nu) * ((1 + nu) ** 2) * one_over_r8 * np.array([u, v])
    d2[1] = d2[0]

    if stress:
        s = np.zeros([2, 3, len(u)])
        s2 = np.zeros([2, 3, len(u)])
        s[0] = 6 * np.array([-u4 - v4 + 6 * u2 * v2,
                             4 * u * v * (v2 - u2),
                             u4 + v4 - 6 * u2 * v2]) * one_over_r8

        s[1] = 6 * np.array([4 * u * v * (v2 - u2),
                             u4 + v4 - 6 * u2 * v2,
                             4 * u * v * (u2 - v2)]) * one_over_r8
        s2[0] = 3 * (1 + nu) * one_over_r10 * np.array([
            ((-15) + nu) * u2 + (9 + (-7) * nu) * v2,
            8 * ((-3) + nu) * u * v,
            (9 + (-7) * nu) * u2 + ((-15) + nu) * v2])
        s2[1] = s2[0]

    res = xr.Dataset({'d': (['charge', 'space', 'node', 'order'], np.stack([d, d2], axis=3)),
                      'charge_type': ('charge', ['hex1', 'hex2'])})
    if stress:
        res['s'] = (['charge', 'space2', 'node'], s)
        res['s2'] = (['charge', 'space2', 'node'], s2)
    return res


def external(u, v, nu=0.3, stress=True):
    u2 = u ** 2
    v2 = v ** 2
    u3 = u ** 3
    v3 = v ** 3
    u4 = u ** 4
    v4 = v ** 4
    u5 = u ** 5
    v5 = v ** 5

    d = np.zeros([5, 2, len(u)])
    d2 = np.zeros([5, 2, len(u)])

    d[0] = (1 - nu) * np.array([u, v])
    d[1] = (1 + nu) * np.array([v, u])
    d[2] = (1 + nu) * np.array([-u, v])
    d[3] = np.array([
        -2*(nu*u3 + 3*u*v2),
        6*u2*v + 2*nu*v3
        ])
    d[4] = np.array([
        -3*(-1 + nu)*u2*v - (3 + nu)*v3,
        -((3 + nu)*u3) - 3*(-1 + nu)*u*v2
        ])

    d2[3]=np.array([
        (3*((37 + 15*nu - 65*nu**2 + 5*nu**3)*u5 + 10*(-3 - 37*nu + 15*nu**2 + nu**3)*u3*v2 + 5*(-47 + 3*nu + 3*nu**2 + nu**3)*u*v4))/20,
        (3*(5*(-47 + 3*nu + 3*nu**2 + nu**3)*u4*v + 10*(-3 - 37*nu + 15*nu**2 + nu**3)*u2*v3 + (37 + 15*nu - 65*nu**2 + 5*nu**3)*v5))/20
        ])
    d2[4]=np.array([
        (3*((-57 - 85*nu + 25*nu**2 + 5*nu**3)*u5 + 10*(-1 + 23*nu - 23*nu**2 + nu**3)*u3*v2 + 5*(43 - 17*nu - 11*nu**2 + nu**3)*u*v4))/20,
        (3*(5*(43 - 17*nu - 11*nu**2 + nu**3)*u4*v + 10*(-1 + 23*nu - 23*nu**2 + nu**3)*u2*v3 + (-57 - 85*nu + 25*nu**2 + 5*nu**3)*v5))/20
        ])

    if stress:
        s = np.zeros([5, 3, len(u)])
        s2 = np.zeros([5, 3, len(u)])
        one = np.ones_like(u)
        zero = np.zeros_like(u)
        s[0] = np.array([one, zero, one])
        s[1] = np.array([zero, -one, zero])
        s[2] = np.array([-one, zero, one])
        s[3] = np.array([-6*v2, zero, 6*u2])
        s[4] = np.array([6*u*v, -3*(u2 + v2), 6*u*v])

        s2[3] = np.array([
          (-3*((-37 + 8*nu + nu**2)*u4 + 6*(-13 + 16*nu + nu**2)*u2*v2 + (23 - 40*nu + 5*nu**2)*v4))/4,
          3*(-13 + 8*nu + nu**2)*u*v*(u2 + v2),
          (-3*((23 - 40*nu + 5*nu**2)*u4 + 6*(-13 + 16*nu + nu**2)*u2*v2 + (-37 + 8*nu + nu**2)*v4))/4
        ])
        s2[4] = np.array([
          (-3*((3 + nu**2)*u4 + 6*(3 - 16*nu + nu**2)*u2*v2 + (-49 + 32*nu + 5*nu**2)*v4))/4,
          3*(15 - 12*nu + nu**2)*u*v*(u2 + v2),
          (-3*((-49 + 32*nu + 5*nu**2)*u4 + 6*(3 - 16*nu + nu**2)*u2*v2 + (3 + nu**2)*v4))/4
        ])
    res = xr.Dataset({'d': (['charge', 'space', 'node', 'order'], np.stack([d, d2], axis=3)),
                      'charge_type': ('charge', ['extIso', 'ext1', 'ext2', 'extHex1', 'extHex2'])})
    if stress:
        res['s'] = (['charge', 'space2', 'node'], s)
        res['s2'] = (['charge', 'space2', 'node'], s2)
    return res